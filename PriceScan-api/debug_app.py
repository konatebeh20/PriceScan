#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de d√©bogage pour identifier le probl√®me exact de l'API
"""

import sys
import os
import traceback

# Ajouter le r√©pertoire courant au path Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def debug_app():
    """D√©bogue l'application √©tape par √©tape"""
    try:
        print(" D√©bogage de l'application PriceScan...")
        
        print("\n1Ô∏è‚É£ Import de la configuration...")
        from config.constant import *
        print("    Configuration import√©e")
        
        print("\n2Ô∏è‚É£ Import de la base de donn√©es...")
        from config.db import db
        print("    Base de donn√©es import√©e")
        
        print("\n3Ô∏è‚É£ Import des mod√®les...")
        from model.PriceScan_db import *
        print("    Mod√®les import√©s")
        
        print("\n4Ô∏è‚É£ Import des helpers...")
        from helpers.mailer import *
        print("    Helpers mailer import√©s")
        
        print("\n5Ô∏è‚É£ Import des ressources...")
        from resources.auth import AuthApi
        from resources.users import UsersApi
        from resources.categories import CategoriesApi
        from resources.favorite import FavoriteApi
        from resources.device_tokens import DeviceTokens
        from resources.stores import StoresApi
        from resources.products import ProductsApi
        from resources.prices import PricesApi
        from resources.receipts import ReceiptsApi
        print("    Toutes les ressources import√©es")
        
        print("\n6Ô∏è‚É£ Import de Flask et extensions...")
        from flask import Flask
        from flask_cors import CORS
        from flask_migrate import Migrate
        from flask_restful import Api
        print("    Flask et extensions import√©s")
        
        print("\n7Ô∏è‚É£ Cr√©ation de l'application...")
        app = Flask(__name__)
        print("    Application Flask cr√©√©e")
        
        print("\n8Ô∏è‚É£ Configuration de l'application...")
        app.secret_key = os.urandom(24)
        app.config['DEBUG'] = True
        app.config['SQLALCHEMY_DATABASE_URI'] = SQL_DB_URL
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
        print("    Configuration appliqu√©e")
        
        print("\n9Ô∏è‚É£ Initialisation des extensions...")
        db.init_app(app)
        migrate = Migrate(app, db)
        CORS(app)
        api = Api(app)
        print("    Extensions initialis√©es")
        
        print("\nüîü Ajout des ressources √† l'API...")
        # Categories API
        api.add_resource(CategoriesApi, '/api/categories/<string:route>', endpoint='cat_all', methods=["GET","POST"])
        api.add_resource(CategoriesApi, '/api/categories/<string:route>', endpoint='cat_all_patch', methods=["PATCH","DELETE"])
        print("    Categories API ajout√©e")
        
        # Users API
        api.add_resource(UsersApi, '/api/users/<string:route>', endpoint='users_all', methods=["GET","POST"])
        api.add_resource(UsersApi, '/api/users/<string:route>', endpoint='users_all_patch', methods=["PATCH","DELETE"])
        print("    Users API ajout√©e")
        
        # Auth API
        api.add_resource(AuthApi, '/api/auth/<string:route>', endpoint='auth_all', methods=["GET","POST"])
        api.add_resource(AuthApi, '/api/auth/<string:route>', endpoint='auth_all_patch', methods=["PATCH","DELETE"])
        print("    Auth API ajout√©e")
        
        # Stores API
        api.add_resource(StoresApi, '/api/stores/<string:route>', endpoint='stores_all', methods=["GET","POST"])
        api.add_resource(StoresApi, '/api/stores/<string:route>', endpoint='stores_all_patch', methods=["PATCH","DELETE"])
        print("    Stores API ajout√©e")
        
        # Products API
        api.add_resource(ProductsApi, '/api/products/<string:route>', endpoint='products_all', methods=["GET","POST"])
        api.add_resource(ProductsApi, '/api/products/<string:route>', endpoint='products_all_patch', methods=["PATCH","DELETE"])
        print("    Products API ajout√©e")
        
        # Prices API
        api.add_resource(PricesApi, '/api/prices/<string:route>', endpoint='prices_all', methods=["GET","POST"])
        api.add_resource(PricesApi, '/api/prices/<string:route>', endpoint='prices_all_patch', methods=["PATCH","DELETE"])
        print("    Prices API ajout√©e")
        
        # Receipts API
        api.add_resource(ReceiptsApi, '/api/receipts/<string:route>', endpoint='receipts_all', methods=["GET","POST"])
        api.add_resource(ReceiptsApi, '/api/receipts/<string:route>', endpoint='receipts_all_patch', methods=["PATCH","DELETE"])
        print("    Receipts API ajout√©e")
        
        # Favorite API
        api.add_resource(FavoriteApi, '/api/favorite/<string:route>', endpoint='favorite_all', methods=["GET","POST"])
        api.add_resource(FavoriteApi, '/api/favorite/<string:route>', endpoint='favorite_all_patch', methods=["PATCH","DELETE"])
        print("    Favorite API ajout√©e")
        
        # Device Tokens
        api.add_resource(DeviceTokens, '/api/device_tokens/<string:route>', endpoint='device_tokens_all', methods=["GET","POST"])
        api.add_resource(DeviceTokens, '/api/device_tokens/<string:route>', endpoint='device_tokens_all_patch', methods=["PATCH","DELETE"])
        print("    Device Tokens API ajout√©e")
        
        print("\nüéâ APPLICATION CR√â√âE AVEC SUCC√àS !")
        print(" Toutes les √©tapes sont pass√©es !")
        
        return app
        
    except Exception as e:
        print(f"\n ERREUR LORS DU D√âBOGAGE : {e}")
        print("\n Traceback complet :")
        traceback.print_exc()
        return None

if __name__ == "__main__":
    app = debug_app()
    if app:
        print("\n Lancement de l'API...")
        try:
            app.run(host='0.0.0.0', port=5000, debug=True)
        except Exception as e:
            print(f" Erreur lors du lancement : {e}")
            traceback.print_exc()
    else:
        print("\nüîß Impossible de cr√©er l'application")
        sys.exit(1)
