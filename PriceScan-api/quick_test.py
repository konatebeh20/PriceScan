#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‚ö° Test rapide de la configuration Dashboard ‚Üî API
V√©rifie rapidement que tout est en place
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def quick_test():
    """Test rapide de la configuration"""
    print("‚ö° Test rapide de la configuration Dashboard ‚Üî API")
    print("=" * 50)
    
    # Test 1: V√©rifier les imports
    print(" Test 1: V√©rification des imports...")
    try:
        from config.db import db
        print("    config.db import√© avec succ√®s")
    except ImportError as e:
        print(f"    Erreur import config.db: {e}")
        return False
    
    try:
        from model.PriceScan_db import ps_promotions, ps_user_profiles, ps_dashboard_stats
        print("    Nouveaux mod√®les import√©s avec succ√®s")
    except ImportError as e:
        print(f"    Erreur import nouveaux mod√®les: {e}")
        return False
    
    try:
        from helpers.promo_deals import PromoDealsHelper
        print("    Helper promotions import√© avec succ√®s")
    except ImportError as e:
        print(f"    Erreur import helper promotions: {e}")
        return False
    
    try:
        from helpers.dashboard_data import DashboardDataHelper
        print("    Helper dashboard import√© avec succ√®s")
    except ImportError as e:
        print(f"    Erreur import helper dashboard: {e}")
        return False
    
    # Test 2: V√©rifier la configuration de la base
    print("\n Test 2: V√©rification de la configuration base...")
    try:
        from config.database_config import SQL_DB_URL
        print(f"    URL de base configur√©e: {SQL_DB_URL[:50]}...")
        
        if "mysql" in SQL_DB_URL.lower():
            print("    Configuration MySQL d√©tect√©e")
        else:
            print("     Configuration non-MySQL d√©tect√©e")
            
    except ImportError as e:
        print(f"    Erreur import config base: {e}")
        return False
    
    # Test 3: V√©rifier les ressources API
    print("\n Test 3: V√©rification des ressources API...")
    try:
        from resources.promotions import PromotionsApi
        print("    API Promotions import√©e avec succ√®s")
    except ImportError as e:
        print(f"    Erreur import API Promotions: {e}")
        return False
    
    try:
        from resources.dashboard import DashboardApi
        print("    API Dashboard import√©e avec succ√®s")
    except ImportError as e:
        print(f"    Erreur import API Dashboard: {e}")
        return False
    
    # Test 4: V√©rifier la structure des mod√®les
    print("\n Test 4: V√©rification de la structure des mod√®les...")
    try:
        # V√©rifier que les mod√®les ont les bons attributs
        promo_attrs = dir(ps_promotions())
        required_attrs = ['title', 'description', 'discount_type', 'discount_value']
        
        missing_attrs = []
        for attr in required_attrs:
            if not hasattr(ps_promotions(), attr):
                missing_attrs.append(attr)
        
        if missing_attrs:
            print(f"    Attributs manquants dans ps_promotions: {missing_attrs}")
            return False
        else:
            print("    Mod√®le ps_promotions correctement configur√©")
            
    except Exception as e:
        print(f"    Erreur v√©rification mod√®le promotions: {e}")
        return False
    
    # Test 5: V√©rifier les helpers
    print("\n Test 5: V√©rification des helpers...")
    try:
        # V√©rifier que les helpers ont les bonnes m√©thodes
        promo_methods = dir(PromoDealsHelper)
        required_methods = ['create_promotion', 'get_active_promotions', 'get_featured_promotions']
        
        missing_methods = []
        for method in required_methods:
            if method not in promo_methods:
                missing_methods.append(method)
        
        if missing_methods:
            print(f"    M√©thodes manquantes dans PromoDealsHelper: {missing_methods}")
            return False
        else:
            print("    Helper PromoDealsHelper correctement configur√©")
            
    except Exception as e:
        print(f"    Erreur v√©rification helper promotions: {e}")
        return False
    
    try:
        dashboard_methods = dir(DashboardDataHelper)
        required_methods = ['get_user_dashboard_stats', 'get_user_profile_summary']
        
        missing_methods = []
        for method in required_methods:
            if method not in dashboard_methods:
                missing_methods.append(method)
        
        if missing_methods:
            print(f"    M√©thodes manquantes dans DashboardDataHelper: {missing_methods}")
            return False
        else:
            print("    Helper DashboardDataHelper correctement configur√©")
            
    except Exception as e:
        print(f"    Erreur v√©rification helper dashboard: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
    print(" La configuration Dashboard ‚Üî API est pr√™te")
    print("\n Prochaines √©tapes:")
    print("   1. Cr√©er les tables: python create_dashboard_tables.py")
    print("   2. Lancer l'API: python app.py")
    print("   3. Tester la communication: python test_dashboard_communication.py")
    
    return True

if __name__ == "__main__":
    success = quick_test()
    if not success:
        print("\n Certains tests ont √©chou√©. V√©rifiez la configuration.")
        sys.exit(1)
