#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
 Gestionnaire de Production PriceScan
Script unifi√© pour g√©rer tous les aspects de la production
"""

import os
import sys
import argparse
import subprocess
import time
import signal
from pathlib import Path

# Ajouter le r√©pertoire courant au path Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class ProductionManager:
    """Gestionnaire de production PriceScan"""
    
    def __init__(self):
        self.environment = os.getenv('FLASK_ENV', 'production')
        self.project_root = Path(__file__).parent
        
        # Dossiers importants
        self.logs_dir = self.project_root / 'logs'
        self.docker_dir = self.project_root / 'docker'
        self.env_file = self.project_root / '.env.prod'
        
        # Cr√©er les dossiers n√©cessaires
        self.logs_dir.mkdir(exist_ok=True)
        
        print(f"üè≠ Gestionnaire de Production PriceScan")
        print(f"üåç Environnement: {self.environment}")
        print(f"üìÅ R√©pertoire: {self.project_root}")
    
    def setup(self):
        """Configure l'environnement de production"""
        print("\nüîß Configuration de l'environnement de production...")
        
        try:
            # V√©rifier les pr√©requis
            self._check_prerequisites()
            
            # Cr√©er le fichier .env.prod
            self._create_env_file()
            
            # Configurer les dossiers
            self._setup_directories()
            
            # Installer les d√©pendances
            self._install_dependencies()
            
            print("‚úÖ Configuration de production termin√©e")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la configuration: {e}")
            sys.exit(1)
    
    def start(self, service=None):
        """D√©marre les services de production"""
        print(f"\nüöÄ D√©marrage des services de production...")
        
        try:
            if service:
                self._start_service(service)
            else:
                # D√©marrer tous les services
                self._start_all_services()
            
            print("‚úÖ Services d√©marr√©s avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du d√©marrage: {e}")
            sys.exit(1)
    
    def stop(self, service=None):
        """Arr√™te les services de production"""
        print(f"\nüõë Arr√™t des services de production...")
        
        try:
            if service:
                self._stop_service(service)
            else:
                # Arr√™ter tous les services
                self._stop_all_services()
            
            print("‚úÖ Services arr√™t√©s avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'arr√™t: {e}")
    
    def restart(self, service=None):
        """Red√©marre les services de production"""
        print(f"\nüîÑ Red√©marrage des services de production...")
        
        try:
            self.stop(service)
            time.sleep(2)
            self.start(service)
            
            print("‚úÖ Services red√©marr√©s avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du red√©marrage: {e}")
    
    def status(self):
        """Affiche le statut des services"""
        print(f"\nüìä Statut des services de production...")
        
        try:
            self._show_service_status()
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification du statut: {e}")
    
    def logs(self, service=None, follow=False):
        """Affiche les logs des services"""
        print(f"\nüìù Affichage des logs...")
        
        try:
            if service:
                self._show_service_logs(service, follow)
            else:
                self._show_all_logs(follow)
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'affichage des logs: {e}")
    
    def deploy(self):
        """D√©ploie l'application en production"""
        print(f"\nüöÄ D√©ploiement en production...")
        
        try:
            # Arr√™ter les services
            self.stop()
            
            # Mettre √† jour le code
            self._update_code()
            
            # Reconstruire les images Docker
            self._rebuild_docker()
            
            # Red√©marrer les services
            self.start()
            
            # V√©rifier la sant√©
            self._health_check()
            
            print("‚úÖ D√©ploiement termin√© avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du d√©ploiement: {e}")
            # Rollback en cas d'erreur
            self._rollback()
    
    def backup(self):
        """Effectue une sauvegarde de la production"""
        print(f"\nüíæ Sauvegarde de la production...")
        
        try:
            self._create_backup()
            print("‚úÖ Sauvegarde termin√©e avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")
    
    def monitor(self):
        """Lance le monitoring en temps r√©el"""
        print(f"\nüìä Monitoring en temps r√©el...")
        
        try:
            self._start_monitoring()
            
        except KeyboardInterrupt:
            print("\nüõë Monitoring arr√™t√©")
        except Exception as e:
            print(f"‚ùå Erreur lors du monitoring: {e}")
    
    def _check_prerequisites(self):
        """V√©rifie les pr√©requis de production"""
        print("   üîç V√©rification des pr√©requis...")
        
        # V√©rifier Docker
        try:
            result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print("   ‚úÖ Docker disponible")
            else:
                raise Exception("Docker non disponible")
        except Exception:
            raise Exception("Docker doit √™tre install√© pour la production")
        
        # V√©rifier Docker Compose
        try:
            result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print("   ‚úÖ Docker Compose disponible")
            else:
                raise Exception("Docker Compose non disponible")
        except Exception:
            raise Exception("Docker Compose doit √™tre install√© pour la production")
        
        # V√©rifier Python
        if sys.version_info < (3, 8):
            raise Exception("Python 3.8+ requis pour la production")
        print("   ‚úÖ Python version compatible")
    
    def _create_env_file(self):
        """Cr√©e le fichier .env.prod"""
        print("   üìù Cr√©ation du fichier .env.prod...")
        
        env_content = f"""# ========================================
# CONFIGURATION PRODUCTION PRICESCAN
# ========================================

# Environnement
FLASK_ENV=production
FLASK_DEBUG=0

# Base de donn√©es
DB_TYPE=mysql
DB_HOST=localhost
DB_PORT=3306
DB_USER=pricescan_user
DB_PASSWORD=CHANGE_THIS_PASSWORD
DB_NAME=pricescan_prod

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=CHANGE_THIS_PASSWORD
REDIS_DB=0

# S√©curit√©
SECRET_KEY=CHANGE_THIS_SECRET_KEY
JWT_SECRET_KEY=CHANGE_THIS_JWT_SECRET_KEY

# Gunicorn
GUNICORN_BIND=0.0.0.0:8000
GUNICORN_PORT=8000
GUNICORN_WORKERS=4
GUNICORN_LOG_LEVEL=info

# Scraping
SCRAPING_ENABLED=true
SCRAPING_DEBUG=false

# Monitoring
PROMETHEUS_ENABLED=true
GRAFANA_ENABLED=true

# Logs
LOG_LEVEL=WARNING
LOG_FILE=logs/production.log

# Notifications
NOTIFICATIONS_ENABLED=true
EMAIL_ENABLED=true
SMS_ENABLED=false
PUSH_ENABLED=false
"""
        
        with open(self.env_file, 'w') as f:
            f.write(env_content)
        
        print("   ‚úÖ Fichier .env.prod cr√©√©")
        print("   ‚ö†Ô∏è  N'oubliez pas de modifier les mots de passe !")
    
    def _setup_directories(self):
        """Configure les dossiers de production"""
        print("   üìÅ Configuration des dossiers...")
        
        directories = [
            'logs',
            'uploads',
            'temp',
            'backups',
            'docker/mysql/init',
            'docker/mysql/conf',
            'docker/nginx',
            'docker/prometheus',
            'docker/grafana/provisioning'
        ]
        
        for directory in directories:
            (self.project_root / directory).mkdir(parents=True, exist_ok=True)
        
        print("   ‚úÖ Dossiers configur√©s")
    
    def _install_dependencies(self):
        """Installe les d√©pendances de production"""
        print("   üì¶ Installation des d√©pendances de production...")
        
        try:
            subprocess.run([
                sys.executable, '-m', 'pip', 'install', '-r', 'requirements-prod.txt'
            ], check=True)
            print("   ‚úÖ D√©pendances install√©es")
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur installation d√©pendances: {e}")
    
    def _start_all_services(self):
        """D√©marre tous les services"""
        print("   üöÄ D√©marrage de tous les services...")
        
        try:
            # Charger les variables d'environnement
            if self.env_file.exists():
                subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', '--env-file', '.env.prod', 'up', '-d'], check=True)
            else:
                subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'up', '-d'], check=True)
            
            print("   ‚úÖ Services d√©marr√©s")
            
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur d√©marrage services: {e}")
    
    def _stop_all_services(self):
        """Arr√™te tous les services"""
        print("   üõë Arr√™t de tous les services...")
        
        try:
            subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'down'], check=True)
            print("   ‚úÖ Services arr√™t√©s")
            
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur arr√™t services: {e}")
    
    def _start_service(self, service):
        """D√©marre un service sp√©cifique"""
        print(f"   üöÄ D√©marrage du service {service}...")
        
        try:
            subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'up', '-d', service], check=True)
            print(f"   ‚úÖ Service {service} d√©marr√©")
            
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur d√©marrage service {service}: {e}")
    
    def _stop_service(self, service):
        """Arr√™te un service sp√©cifique"""
        print(f"   üõë Arr√™t du service {service}...")
        
        try:
            subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'stop', service], check=True)
            print(f"   ‚úÖ Service {service} arr√™t√©")
            
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur arr√™t service {service}: {e}")
    
    def _show_service_status(self):
        """Affiche le statut des services"""
        try:
            subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'ps'], check=True)
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur affichage statut: {e}")
    
    def _show_service_logs(self, service, follow=False):
        """Affiche les logs d'un service"""
        cmd = ['docker-compose', '-f', 'docker-compose.prod.yml', 'logs']
        if follow:
            cmd.append('-f')
        cmd.append(service)
        
        try:
            subprocess.run(cmd, check=True)
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur affichage logs: {e}")
    
    def _show_all_logs(self, follow=False):
        """Affiche tous les logs"""
        cmd = ['docker-compose', '-f', 'docker-compose.prod.yml', 'logs']
        if follow:
            cmd.append('-f')
        
        try:
            subprocess.run(cmd, check=True)
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur affichage logs: {e}")
    
    def _update_code(self):
        """Met √† jour le code source"""
        print("   üì• Mise √† jour du code source...")
        
        try:
            # Git pull si c'est un repository Git
            if (self.project_root / '.git').exists():
                subprocess.run(['git', 'pull'], cwd=self.project_root, check=True)
                print("   ‚úÖ Code source mis √† jour")
            else:
                print("   ‚ÑπÔ∏è  Pas de repository Git, mise √† jour manuelle requise")
                
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur mise √† jour code: {e}")
    
    def _rebuild_docker(self):
        """Reconstruit les images Docker"""
        print("   üî® Reconstruction des images Docker...")
        
        try:
            subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'build', '--no-cache'], check=True)
            print("   ‚úÖ Images Docker reconstruites")
            
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur reconstruction Docker: {e}")
    
    def _health_check(self):
        """V√©rifie la sant√© des services"""
        print("   üè• V√©rification de la sant√© des services...")
        
        try:
            # Attendre que les services soient pr√™ts
            time.sleep(10)
            
            # V√©rifier l'API
            result = subprocess.run(['curl', '-f', 'http://localhost:8000/health'], capture_output=True, timeout=10)
            if result.returncode == 0:
                print("   ‚úÖ API en bonne sant√©")
            else:
                raise Exception("API non accessible")
                
        except Exception as e:
            raise Exception(f"Erreur v√©rification sant√©: {e}")
    
    def _rollback(self):
        """Effectue un rollback en cas d'erreur"""
        print("   ‚ö†Ô∏è  Rollback en cours...")
        
        try:
            # Arr√™ter les nouveaux services
            self.stop()
            
            # Red√©marrer les anciens services
            print("   üîÑ Red√©marrage des anciens services...")
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors du rollback: {e}")
    
    def _create_backup(self):
        """Cr√©e une sauvegarde"""
        print("   üíæ Cr√©ation de la sauvegarde...")
        
        try:
            # Sauvegarde de la base de donn√©es
            subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'exec', '-T', 'pricescan-mysql', 'mysqldump', '-u', 'root', '-p${MYSQL_ROOT_PASSWORD}', 'pricescan_prod'], 
                         stdout=open(self.project_root / 'backups' / f'backup_{int(time.time())}.sql', 'w'), check=True)
            
            print("   ‚úÖ Sauvegarde cr√©√©e")
            
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur cr√©ation sauvegarde: {e}")
    
    def _start_monitoring(self):
        """Lance le monitoring en temps r√©el"""
        print("   üìä D√©marrage du monitoring...")
        
        try:
            # Afficher les logs en temps r√©el
            subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'logs', '-f'], check=True)
            
        except subprocess.CalledProcessError as e:
            raise Exception(f"Erreur monitoring: {e}")

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description='Gestionnaire de Production PriceScan')
    parser.add_argument('command', choices=[
        'setup', 'start', 'stop', 'restart', 'status', 'logs', 'deploy', 'backup', 'monitor'
    ], help='Commande √† ex√©cuter')
    parser.add_argument('--service', help='Service sp√©cifique (optionnel)')
    parser.add_argument('--follow', '-f', action='store_true', help='Suivre les logs en temps r√©el')
    
    args = parser.parse_args()
    
    # Cr√©er le gestionnaire
    manager = ProductionManager()
    
    try:
        # Ex√©cuter la commande
        if args.command == 'setup':
            manager.setup()
        elif args.command == 'start':
            manager.start(args.service)
        elif args.command == 'stop':
            manager.stop(args.service)
        elif args.command == 'restart':
            manager.restart(args.service)
        elif args.command == 'status':
            manager.status()
        elif args.command == 'logs':
            manager.logs(args.service, args.follow)
        elif args.command == 'deploy':
            manager.deploy()
        elif args.command == 'backup':
            manager.backup()
        elif args.command == 'monitor':
            manager.monitor()
            
    except KeyboardInterrupt:
        print("\nüõë Op√©ration interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
