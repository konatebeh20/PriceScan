# ========================================
# DOCKER COMPOSE PRODUCTION PRICESCAN
# ========================================
# Configuration de production complète
# ========================================

version: '3.8'

services:
  # API PriceScan
  pricescan-api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: pricescan-api-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - DB_TYPE=mysql
      - DB_HOST=pricescan-mysql
      - DB_PORT=3306
      - DB_USER=pricescan_user
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=pricescan_prod
      - GUNICORN_BIND=0.0.0.0:8000
      - GUNICORN_WORKERS=4
      - GUNICORN_LOG_LEVEL=info
      - SCRAPING_ENABLED=true
      - SCRAPING_DEBUG=false
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      - pricescan-mysql
      - pricescan-redis
    networks:
      - pricescan-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de données MySQL
  pricescan-mysql:
    image: mysql:8.0
    container_name: pricescan-mysql-prod
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=pricescan_prod
      - MYSQL_USER=pricescan_user
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf:/etc/mysql/conf.d
    ports:
      - "3306:3306"
    networks:
      - pricescan-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  pricescan-redis:
    image: redis:7-alpine
    container_name: pricescan-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pricescan-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Reverse Proxy)
  pricescan-nginx:
    image: nginx:alpine
    container_name: pricescan-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - pricescan-api
    networks:
      - pricescan-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring avec Prometheus
  pricescan-prometheus:
    image: prom/prometheus:latest
    container_name: pricescan-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pricescan-network

  # Visualisation avec Grafana
  pricescan-grafana:
    image: grafana/grafana:latest
    container_name: pricescan-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - pricescan-prometheus
    networks:
      - pricescan-network

  # Logs centralisés avec ELK Stack (optionnel)
  pricescan-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pricescan-elasticsearch-prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - pricescan-network

  pricescan-logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: pricescan-logstash-prod
    restart: unless-stopped
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
    depends_on:
      - pricescan-elasticsearch
    networks:
      - pricescan-network

  pricescan-kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: pricescan-kibana-prod
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://pricescan-elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - pricescan-elasticsearch
    networks:
      - pricescan-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  pricescan-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
