#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üìä API Resource pour les donn√©es du dashboard
G√®re la r√©cup√©ration des statistiques et donn√©es utilisateur
"""

import json
import logging
from datetime import datetime
from flask import request, jsonify
from flask_restful import Resource

from config.db import db
from model.PriceScan_db import ps_users, ps_user_profiles, ps_dashboard_stats
from helpers.dashboard_data import DashboardDataHelper

logger = logging.getLogger(__name__)


class DashboardApi(Resource):
    """API Resource pour les donn√©es du dashboard"""
    
    def get(self, route):
        """
        GET /api/dashboard/<route>
        
        Routes disponibles:
        - stats/<user_uid>: Statistiques du dashboard pour un utilisateur
        - profile/<user_uid>: Profil utilisateur et r√©sum√©
        - activity/<user_uid>: Activit√© r√©cente de l'utilisateur
        - monthly/<user_uid>/<month>/<year>: Stats mensuelles sp√©cifiques
        """
        try:
            if route.startswith("stats/"):
                user_uid = route.split("/")[1]
                return self._get_user_stats(user_uid)
            elif route.startswith("profile/"):
                user_uid = route.split("/")[1]
                return self._get_user_profile(user_uid)
            elif route.startswith("activity/"):
                user_uid = route.split("/")[1]
                return self._get_user_activity(user_uid)
            elif route.startswith("monthly/"):
                parts = route.split("/")
                if len(parts) == 4:
                    user_uid = parts[1]
                    month = int(parts[2])
                    year = int(parts[3])
                    return self._get_monthly_stats(user_uid, month, year)
                else:
                    return {"error": "Format de route invalide pour monthly"}, 400
            else:
                return {"error": "Route non reconnue"}, 400
                
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des donn√©es dashboard: {str(e)}")
            return {"error": "Erreur interne du serveur"}, 500
    
    def post(self, route):
        """
        POST /api/dashboard/<route>
        
        Routes disponibles:
        - profile/update/<user_uid>: Met √† jour le profil utilisateur
        """
        try:
            if route.startswith("profile/update/"):
                user_uid = route.split("/")[2]
                return self._update_user_profile(user_uid)
            else:
                return {"error": "Route non reconnue"}, 400
                
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour du profil: {str(e)}")
            return {"error": "Erreur interne du serveur"}, 500
    
    def _get_user_stats(self, user_uid):
        """R√©cup√®re les statistiques du dashboard pour un utilisateur"""
        try:
            # V√©rifier que l'utilisateur existe
            user = ps_users.query.filter_by(u_uid=user_uid).first()
            if not user:
                return {"error": "Utilisateur non trouv√©"}, 404
            
            # R√©cup√©rer les stats du mois actuel
            stats = DashboardDataHelper.get_user_dashboard_stats(user_uid)
            
            if not stats:
                return {"error": "Erreur lors de la r√©cup√©ration des statistiques"}, 500
            
            return {
                "status": "success",
                "user_uid": user_uid,
                "stats": stats,
                "generated_at": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des stats utilisateur: {str(e)}")
            return {"error": "Erreur lors de la r√©cup√©ration des statistiques"}, 500
    
    def _get_user_profile(self, user_uid):
        """R√©cup√®re le profil utilisateur et r√©sum√©"""
        try:
            # V√©rifier que l'utilisateur existe
            user = ps_users.query.filter_by(u_uid=user_uid).first()
            if not user:
                return {"error": "Utilisateur non trouv√©"}, 404
            
            # R√©cup√©rer le profil
            profile_summary = DashboardDataHelper.get_user_profile_summary(user_uid)
            
            if not profile_summary:
                return {"error": "Erreur lors de la r√©cup√©ration du profil"}, 500
            
            return {
                "status": "success",
                "user_uid": user_uid,
                "profile": profile_summary,
                "retrieved_at": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration du profil utilisateur: {str(e)}")
            return {"error": "Erreur lors de la r√©cup√©ration du profil"}, 500
    
    def _get_user_activity(self, user_uid):
        """R√©cup√®re l'activit√© r√©cente de l'utilisateur"""
        try:
            # V√©rifier que l'utilisateur existe
            user = ps_users.query.filter_by(u_uid=user_uid).first()
            if not user:
                return {"error": "Utilisateur non trouv√©"}, 404
            
            # R√©cup√©rer l'activit√© r√©cente
            limit = request.args.get('limit', 10, type=int)
            if limit > 50:  # Limiter √† 50 pour √©viter la surcharge
                limit = 50
            
            recent_activity = DashboardDataHelper.get_recent_activity(user_uid, limit)
            
            return {
                "status": "success",
                "user_uid": user_uid,
                "recent_activity": recent_activity,
                "total_activities": len(recent_activity),
                "retrieved_at": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration de l'activit√© utilisateur: {str(e)}")
            return {"error": "Erreur lors de la r√©cup√©ration de l'activit√©"}, 500
    
    def _get_monthly_stats(self, user_uid, month, year):
        """R√©cup√®re les statistiques mensuelles sp√©cifiques"""
        try:
            # V√©rifier que l'utilisateur existe
            user = ps_users.query.filter_by(u_uid=user_uid).first()
            if not user:
                return {"error": "Utilisateur non trouv√©"}, 404
            
            # Validation des param√®tres
            if month < 1 or month > 12:
                return {"error": "Mois invalide (doit √™tre entre 1 et 12)"}, 400
            
            if year < 2020 or year > 2030:
                return {"error": "Ann√©e invalide (doit √™tre entre 2020 et 2030)"}, 400
            
            # R√©cup√©rer les stats du mois sp√©cifi√©
            stats = DashboardDataHelper.get_user_dashboard_stats(user_uid, month, year)
            
            if not stats:
                return {"error": "Erreur lors de la r√©cup√©ration des statistiques mensuelles"}, 500
            
            return {
                "status": "success",
                "user_uid": user_uid,
                "month": month,
                "year": year,
                "stats": stats,
                "generated_at": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des stats mensuelles: {str(e)}")
            return {"error": "Erreur lors de la r√©cup√©ration des statistiques mensuelles"}, 500
    
    def _update_user_profile(self, user_uid):
        """Met √† jour le profil utilisateur"""
        try:
            # V√©rifier que l'utilisateur existe
            user = ps_users.query.filter_by(u_uid=user_uid).first()
            if not user:
                return {"error": "Utilisateur non trouv√©"}, 404
            
            data = request.get_json()
            if not data:
                return {"error": "Donn√©es de mise √† jour manquantes"}, 400
            
            # Validation des champs
            allowed_fields = [
                'birth_date', 'gender', 'preferred_currency', 
                'preferred_language', 'notification_preferences'
            ]
            
            profile_data = {}
            for field in allowed_fields:
                if field in data:
                    if field == 'birth_date' and data[field]:
                        try:
                            # Convertir la date ISO en objet date
                            birth_date = datetime.fromisoformat(data[field].replace('Z', '+00:00')).date()
                            profile_data[field] = birth_date
                        except ValueError:
                            return {"error": "Format de date de naissance invalide"}, 400
                    elif field == 'notification_preferences':
                        # Valider que c'est un JSON valide
                        try:
                            json.dumps(data[field])
                            profile_data[field] = json.dumps(data[field])
                        except (TypeError, ValueError):
                            return {"error": "Pr√©f√©rences de notification invalides"}, 400
                    else:
                        profile_data[field] = data[field]
            
            # Mettre √† jour le profil
            if profile_data:
                success = DashboardDataHelper.update_user_profile(user_uid, profile_data)
                if success:
                    return {
                        "status": "success",
                        "message": "Profil mis √† jour avec succ√®s",
                        "updated_fields": list(profile_data.keys())
                    }
                else:
                    return {"error": "Erreur lors de la mise √† jour du profil"}, 500
            else:
                return {"error": "Aucun champ valide √† mettre √† jour"}, 400
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour du profil: {str(e)}")
            return {"error": "Erreur lors de la mise √† jour du profil"}, 500
    
    def _get_dashboard_overview(self, user_uid):
        """R√©cup√®re un aper√ßu complet du dashboard"""
        try:
            # V√©rifier que l'utilisateur existe
            user = ps_users.query.filter_by(u_uid=user_uid).first()
            if not user:
                return {"error": "Utilisateur non trouv√©"}, 404
            
            # R√©cup√©rer toutes les donn√©es en parall√®le
            current_stats = DashboardDataHelper.get_user_dashboard_stats(user_uid)
            profile_summary = DashboardDataHelper.get_user_profile_summary(user_uid)
            recent_activity = DashboardDataHelper.get_recent_activity(user_uid, 5)
            
            # Calculer les tendances (comparaison avec le mois pr√©c√©dent)
            current_month = datetime.utcnow().month
            current_year = datetime.utcnow().year
            
            if current_month == 1:
                prev_month = 12
                prev_year = current_year - 1
            else:
                prev_month = current_month - 1
                prev_year = current_year
            
            previous_stats = DashboardDataHelper.get_user_dashboard_stats(user_uid, prev_month, prev_year)
            
            # Calculer les variations
            trends = {}
            if current_stats and previous_stats:
                if previous_stats.get('total_spent', 0) > 0:
                    spending_change = ((current_stats.get('total_spent', 0) - previous_stats.get('total_spent', 0)) / 
                                    previous_stats.get('total_spent', 0)) * 100
                    trends['spending_change_percent'] = round(spending_change, 2)
                else:
                    trends['spending_change_percent'] = 0
                
                trends['receipts_change'] = current_stats.get('total_receipts', 0) - previous_stats.get('total_receipts', 0)
                trends['avg_receipt_change'] = current_stats.get('avg_receipt_amount', 0) - previous_stats.get('avg_receipt_amount', 0)
            
            return {
                "status": "success",
                "user_uid": user_uid,
                "dashboard_overview": {
                    "current_month": {
                        "month": current_month,
                        "year": current_year,
                        "stats": current_stats
                    },
                    "previous_month": {
                        "month": prev_month,
                        "year": prev_year,
                        "stats": previous_stats
                    },
                    "trends": trends,
                    "profile": profile_summary,
                    "recent_activity": recent_activity
                },
                "generated_at": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration de l'aper√ßu dashboard: {str(e)}")
            return {"error": "Erreur lors de la r√©cup√©ration de l'aper√ßu dashboard"}, 500
