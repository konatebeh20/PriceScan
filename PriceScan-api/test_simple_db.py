#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ Test simple de la base de donn√©es Dashboard
Teste la communication sans importer l'app complet
"""

import sys
import os
import json
from datetime import datetime

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.db import db
from model.PriceScan_db import *
from sqlalchemy import text

# Configuration simple de Flask
from flask import Flask
test_app = Flask(__name__)
test_app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql+psycopg2://postgres:Konate%202019@localhost:5432/PriceScan_db'
test_app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialiser la base de donn√©es
db.init_app(test_app)

def test_database_connection():
    """Test de la connexion √† la base de donn√©es"""
    print(" Test de connexion √† la base de donn√©es...")
    
    with test_app.app_context():
        try:
            # Test de connexion simple
            result = db.session.execute(text("SELECT 1"))
            print(" Connexion √† la base de donn√©es r√©ussie")
            return True
        except Exception as e:
            print(f" Erreur de connexion: {e}")
            return False

def test_dashboard_tables():
    """Test des tables du dashboard"""
    print("\n Test des tables du dashboard...")
    
    with test_app.app_context():
        tables_to_test = [
            'ps_promotions',
            'ps_user_profiles', 
            'ps_dashboard_stats',
            'ps_scan_history'
        ]
        
        results = {}
        
        for table_name in tables_to_test:
            try:
                result = db.session.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
                count = result.scalar()
                results[table_name] = {"status": "OK", "count": count}
                print(f"    {table_name}: {count} enregistrements")
            except Exception as e:
                results[table_name] = {"status": "ERROR", "error": str(e)}
                print(f"    {table_name}: Erreur - {e}")
        
        return results

def test_dashboard_data():
    """Test des donn√©es du dashboard"""
    print("\n Test des donn√©es du dashboard...")
    
    with test_app.app_context():
        try:
            # Test des promotions
            promotions = ps_promotions.query.limit(3).all()
            print(f"    Promotions: {len(promotions)} trouv√©es")
            
            if promotions:
                for promo in promotions:
                    print(f"      - {promo.title} ({promo.discount_value}% de r√©duction)")
            
            # Test des profils utilisateurs
            user_profiles = ps_user_profiles.query.limit(3).all()
            print(f"    Profils utilisateurs: {len(user_profiles)} trouv√©s")
            
            # Test des statistiques
            dashboard_stats = ps_dashboard_stats.query.limit(3).all()
            print(f"    Statistiques dashboard: {len(dashboard_stats)} trouv√©es")
            
            if dashboard_stats:
                for stats in dashboard_stats:
                    print(f"      - Utilisateur {stats.user_uid}: {stats.total_receipts} re√ßus, {stats.total_spent} CFA")
            
            return True
            
        except Exception as e:
            print(f"    Erreur lors du test des donn√©es: {e}")
            return False

def test_data_creation():
    """Test de cr√©ation de nouvelles donn√©es"""
    print("\n Test de cr√©ation de nouvelles donn√©es...")
    
    with test_app.app_context():
        try:
            # Cr√©er une nouvelle promotion de test
            from datetime import timedelta
            now = datetime.datetime.utcnow()
            new_promotion = ps_promotions(
                title="Promotion Test Communication",
                description="Test de communication dashboard ‚Üî base de donn√©es",
                discount_type="percentage",
                discount_value=15.0,
                start_date=now,
                end_date=now + timedelta(days=7),
                min_purchase=1000.0,
                is_active=True,
                is_featured=False
            )
            
            db.session.add(new_promotion)
            db.session.commit()
            
            print("    Nouvelle promotion cr√©√©e avec succ√®s")
            
            # R√©cup√©rer la promotion cr√©√©e
            created_promo = ps_promotions.query.filter_by(title="Promotion Test Communication").first()
            if created_promo:
                print(f"      - ID: {created_promo.id}")
                print(f"      - Titre: {created_promo.title}")
                print(f"      - R√©duction: {created_promo.discount_value}%")
            
            # Supprimer la promotion de test
            db.session.delete(created_promo)
            db.session.commit()
            print("    Promotion de test supprim√©e")
            
            return True
            
        except Exception as e:
            print(f"    Erreur lors du test de cr√©ation: {e}")
            db.session.rollback()
            return False

def main():
    """Fonction principale de test"""
    print("üß™ Test de communication Dashboard ‚Üî Base de donn√©es")
    print("=" * 60)
    
    # Test 1: Connexion √† la base de donn√©es
    if not test_database_connection():
        print("\n Impossible de se connecter √† la base de donn√©es")
        return
    
    # Test 2: Tables du dashboard
    table_results = test_dashboard_tables()
    
    # Test 3: Donn√©es du dashboard
    data_test = test_dashboard_data()
    
    # Test 4: Cr√©ation de donn√©es
    creation_test = test_data_creation()
    
    # R√©sum√© des tests
    print("\n" + "=" * 60)
    print(" R√âSUM√â DES TESTS")
    print("=" * 60)
    
    all_tests_passed = all([
        table_results,
        data_test,
        creation_test
    ])
    
    if all_tests_passed:
        print("üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
        print(" La communication Dashboard ‚Üî Base de donn√©es fonctionne parfaitement")
        print("\n Le dashboard peut maintenant:")
        print("   - Lire les donn√©es de la base")
        print("   - Cr√©er de nouvelles donn√©es")
        print("   - Mettre √† jour les donn√©es existantes")
        print("   - Supprimer des donn√©es")
        print("   - R√©cup√©rer les statistiques")
        print("   - G√©rer les promotions")
        print("   - G√©rer les profils utilisateurs")
    else:
        print("  Certains tests ont √©chou√©")
        print(" V√©rifiez la configuration de la base de donn√©es")
    
    print("\nüìö Prochaines √©tapes:")
    print("   1. Lancer l'API compl√®te: python app.py")
    print("   2. Tester les endpoints API")
    print("   3. Int√©grer avec le dashboard Angular")

if __name__ == "__main__":
    main()
