#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test de l'API des produits PriceScan
"""

import requests
import json

def test_products_api():
    """Teste l'API des produits"""
    base_url = "http://localhost:5000"
    
    print("üß™ TEST DE L'API DES PRODUITS PRICESCAN")
    print("=" * 50)
    
    # 1. Test de r√©cup√©ration des cat√©gories
    print("\nüìÇ 1. Test de r√©cup√©ration des cat√©gories...")
    try:
        response = requests.get(f"{base_url}/api/categories", timeout=10)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            categories = response.json()
            print(f" {len(categories.get('categories', []))} cat√©gories r√©cup√©r√©es")
            for cat in categories.get('categories', [])[:3]:  # Afficher les 3 premi√®res
                print(f"   - {cat.get('cat_label', 'N/A')} (ID: {cat.get('id', 'N/A')})")
        else:
            print(f" √âchec: {response.text}")
    except Exception as e:
        print(f" Erreur: {e}")
    
    # 2. Test de r√©cup√©ration des magasins
    print("\nüè™ 2. Test de r√©cup√©ration des magasins...")
    try:
        response = requests.get(f"{base_url}/api/stores", timeout=10)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            stores = response.json()
            print(f" {len(stores.get('stores', []))} magasins r√©cup√©r√©s")
            for store in stores.get('stores', [])[:3]:  # Afficher les 3 premiers
                print(f"   - {store.get('store_name', 'N/A')} (ID: {store.get('id', 'N/A')})")
        else:
            print(f" √âchec: {response.text}")
    except Exception as e:
        print(f" Erreur: {e}")
    
    # 3. Test de r√©cup√©ration des produits
    print("\nüì¶ 3. Test de r√©cup√©ration des produits...")
    try:
        response = requests.get(f"{base_url}/api/products", timeout=10)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            products = response.json()
            print(f" {len(products.get('products', []))} produits r√©cup√©r√©s")
            for product in products.get('products', [])[:3]:  # Afficher les 3 premiers
                print(f"   - {product.get('product_name', 'N/A')} - {product.get('price_amount', 0)} {product.get('price_currency', 'CFA')}")
        else:
            print(f" √âchec: {response.text}")
    except Exception as e:
        print(f" Erreur: {e}")
    
    # 4. Test de cr√©ation d'un produit
    print("\n 4. Test de cr√©ation d'un produit...")
    
    # D'abord r√©cup√©rer une cat√©gorie et un magasin
    try:
        cat_response = requests.get(f"{base_url}/api/categories", timeout=10)
        store_response = requests.get(f"{base_url}/api/stores", timeout=10)
        
        if cat_response.status_code == 200 and store_response.status_code == 200:
            categories = cat_response.json().get('categories', [])
            stores = store_response.json().get('stores', [])
            
            if categories and stores:
                category_id = categories[0]['id']
                store_id = stores[0]['id']
                
                product_data = {
                    "product_name": "Produit Test API",
                    "product_description": "Description du produit test",
                    "product_brand": "Marque Test",
                    "product_barcode": "1234567890123",
                    "category_id": category_id,
                    "store_id": store_id,
                    "price_amount": 1500.0,
                    "price_currency": "CFA",
                    "product_image": "https://example.com/image.jpg"
                }
                
                response = requests.post(
                    f"{base_url}/api/products",
                    json=product_data,
                    headers={'Content-Type': 'application/json'},
                    timeout=10
                )
                
                print(f"Status: {response.status_code}")
                if response.status_code == 201:
                    result = response.json()
                    print(" Produit cr√©√© avec succ√®s !")
                    print(f"   ID: {result.get('product', {}).get('id', 'N/A')}")
                    print(f"   Nom: {result.get('product', {}).get('product_name', 'N/A')}")
                    print(f"   Prix: {result.get('product', {}).get('price_amount', 0)} {result.get('product', {}).get('price_currency', 'CFA')}")
                    
                    # Sauvegarder l'ID pour les tests suivants
                    product_id = result.get('product', {}).get('id')
                    
                    # 5. Test de r√©cup√©ration du produit cr√©√©
                    print(f"\n 5. Test de r√©cup√©ration du produit {product_id}...")
                    get_response = requests.get(f"{base_url}/api/products/{product_id}", timeout=10)
                    print(f"Status: {get_response.status_code}")
                    if get_response.status_code == 200:
                        print(" Produit r√©cup√©r√© avec succ√®s !")
                    else:
                        print(f" √âchec r√©cup√©ration: {get_response.text}")
                    
                    # 6. Test de mise √† jour du produit
                    print(f"\n‚úèÔ∏è 6. Test de mise √† jour du produit {product_id}...")
                    update_data = {
                        "product_name": "Produit Test API - Modifi√©",
                        "price_amount": 2000.0
                    }
                    update_response = requests.put(
                        f"{base_url}/api/products/{product_id}",
                        json=update_data,
                        headers={'Content-Type': 'application/json'},
                        timeout=10
                    )
                    print(f"Status: {update_response.status_code}")
                    if update_response.status_code == 200:
                        print(" Produit mis √† jour avec succ√®s !")
                    else:
                        print(f" √âchec mise √† jour: {update_response.text}")
                    
                    # 7. Test de suppression du produit
                    print(f"\nüóëÔ∏è 7. Test de suppression du produit {product_id}...")
                    delete_response = requests.delete(f"{base_url}/api/products/{product_id}", timeout=10)
                    print(f"Status: {delete_response.status_code}")
                    if delete_response.status_code == 200:
                        print(" Produit supprim√© avec succ√®s !")
                    else:
                        print(f" √âchec suppression: {delete_response.text}")
                    
                else:
                    print(f" √âchec cr√©ation: {response.text}")
            else:
                print(" Aucune cat√©gorie ou magasin trouv√© pour le test")
        else:
            print(" Impossible de r√©cup√©rer cat√©gories ou magasins")
            
    except Exception as e:
        print(f" Erreur lors du test de cr√©ation: {e}")

if __name__ == "__main__":
    test_products_api()
