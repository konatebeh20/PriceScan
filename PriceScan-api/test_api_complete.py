#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de test complet de l'API PriceScan
"""

import sys
import os

# Ajouter le r√©pertoire courant au path Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_api_creation():
    """Test de cr√©ation de l'API Flask"""
    try:
        print("üß™ Test de cr√©ation de l'API Flask...")
        
        # Import des modules n√©cessaires
        from flask import Flask
        from flask_cors import CORS
        from flask_migrate import Migrate
        from flask_sqlalchemy import SQLAlchemy
        from flask_restful import Api
        
        print("   ‚úÖ Modules Flask import√©s")
        
        # Cr√©er l'application Flask
        app = Flask(__name__)
        print("   ‚úÖ Application Flask cr√©√©e")
        
        # Configuration
        app.config['DEBUG'] = True
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        
        print("   ‚úÖ Configuration appliqu√©e")
        
        # Initialiser les extensions
        db = SQLAlchemy()
        db.init_app(app)
        print("   ‚úÖ Base de donn√©es initialis√©e")
        
        migrate = Migrate(app, db)
        print("   ‚úÖ Migrations initialis√©es")
        
        CORS(app)
        print("   ‚úÖ CORS activ√©")
        
        api = Api(app)
        print("   ‚úÖ API REST initialis√©e")
        
        print("   ‚úÖ API Flask cr√©√©e avec succ√®s !")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la cr√©ation de l'API : {e}")
        return False

def test_resources_import():
    """Test de l'import des ressources"""
    try:
        print("\nüîß Test de l'import des ressources...")
        
        from resources.auth import AuthApi
        from resources.users import UsersApi
        from resources.categories import CategoriesApi
        from resources.favorite import FavoriteApi
        from resources.device_tokens import DeviceTokens
        from resources.stores import StoresApi
        from resources.products import ProductsApi
        from resources.prices import PricesApi
        from resources.receipts import ReceiptsApi
        
        print("   ‚úÖ Toutes les ressources import√©es")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de l'import des ressources : {e}")
        return False

def test_helpers_import():
    """Test de l'import des helpers"""
    try:
        print("\nüîß Test de l'import des helpers...")
        
        from helpers.mailer import send_mailer_custom
        from helpers.users import create_user
        from helpers.auth import login
        from helpers.receipt import upload_receipt
        
        print("   ‚úÖ Tous les helpers import√©s")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de l'import des helpers : {e}")
        return False

def test_models_import():
    """Test de l'import des mod√®les"""
    try:
        print("\nüóÑÔ∏è Test de l'import des mod√®les...")
        
        from model.PriceScan_db import ps_users, ps_stores, ps_products, ps_prices
        
        print("   ‚úÖ Tous les mod√®les import√©s")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de l'import des mod√®les : {e}")
        return False

def main():
    """Fonction principale"""
    print("=" * 60)
    print("üß™ TEST COMPLET DE L'API PRICESCAN")
    print("=" * 60)
    
    success = True
    
    # Test 1: Cr√©ation de l'API Flask
    if not test_api_creation():
        success = False
    
    # Test 2: Import des ressources
    if not test_resources_import():
        success = False
    
    # Test 3: Import des helpers
    if not test_helpers_import():
        success = False
    
    # Test 4: Import des mod√®les
    if not test_models_import():
        success = False
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ TOUS LES TESTS SONT PASS√âS !")
        print("‚úÖ L'API PriceScan est pr√™te √† √™tre lanc√©e !")
        print("\nüöÄ Lancez l'API avec : python app.py")
    else:
        print("‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â")
        print("üîß V√©rifiez les erreurs ci-dessus")
    print("=" * 60)
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
