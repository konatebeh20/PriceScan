#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ Test du Scraping Automatique PriceScan
V√©rifie le fonctionnement et la sauvegarde en base de donn√©es
"""

import sys
import os
import time
import sqlite3
from datetime import datetime, timedelta

# Ajouter le r√©pertoire courant au path Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_database_connection():
    """Teste la connexion √† la base de donn√©es"""
    print("üîå TEST DE CONNEXION √Ä LA BASE DE DONN√âES")
    print("=" * 50)
    
    try:
        from config.db import db
        from model.PriceScan_db import ps_products, ps_prices, ps_stores
        
        print(" Connexion √† la base de donn√©es r√©ussie")
        print(f"    Tables disponibles: ps_products, ps_prices, ps_stores")
        
        # V√©rifier le nombre d'enregistrements
        try:
            products_count = ps_products.query.count()
            prices_count = ps_prices.query.count()
            stores_count = ps_stores.query.count()
            
            print(f"   üì¶ Produits: {products_count}")
            print(f"   üí∞ Prix: {prices_count}")
            print(f"   üè™ Magasins: {stores_count}")
            
        except Exception as e:
            print(f"     Impossible de compter les enregistrements: {e}")
        
        return True
        
    except Exception as e:
        print(f" Erreur de connexion √† la base: {e}")
        return False

def test_scraping_modules():
    """Teste les modules de scraping individuels"""
    print("\nüß™ TEST DES MODULES DE SCRAPING")
    print("=" * 50)
    
    try:
        # Test Carrefour
        print("\n1Ô∏è‚É£ Test Carrefour...")
        from helpers.scrapper.carrefour import scrape_carrefour
        results = scrape_carrefour("smartphone")
        print(f"    R√©sultats: {len(results)} produits trouv√©s")
        if results:
            print(f"   üì± Premier produit: {results[0]}")
        
        # Test Abidjan Mall
        print("\n2Ô∏è‚É£ Test Abidjan Mall...")
        from helpers.scrapper.abidjanmall import scrape_abidjanmall
        results = scrape_abidjanmall("laptop")
        print(f"    R√©sultats: {len(results)} produits trouv√©s")
        if results:
            print(f"   üíª Premier produit: {results[0]}")
        
        # Test Prosuma
        print("\n3Ô∏è‚É£ Test Prosuma...")
        from helpers.scrapper.prosuma import scrape_prosuma
        results = scrape_prosuma("√©cran")
        print(f"    R√©sultats: {len(results)} produits trouv√©s")
        if results:
            print(f"   üñ•Ô∏è Premier produit: {results[0]}")
        
        # Test Playce
        print("\n4Ô∏è‚É£ Test Playce...")
        from helpers.scrapper.playce import scrape_playce
        results = scrape_playce("clavier")
        print(f"    R√©sultats: {len(results)} produits trouv√©s")
        if results:
            print(f"   ‚å®Ô∏è Premier produit: {results[0]}")
        
        print("\n Tous les modules de scraping fonctionnent !")
        return True
        
    except Exception as e:
        print(f"\n Erreur lors du test des modules: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_auto_scraper():
    """Teste le syst√®me de scraping automatique"""
    print("\nü§ñ TEST DU SCRAPING AUTOMATIQUE")
    print("=" * 50)
    
    try:
        from helpers.auto_scraper import AutoScraper
        
        # Cr√©er une instance de test
        scraper = AutoScraper()
        print("    Instance AutoScraper cr√©√©e")
        
        # V√©rifier la configuration
        status = scraper.get_status()
        print(f"    Statut: {status['is_running']}")
        print(f"   üè™ Magasins configur√©s: {len(status['stores'])}")
        print(f"   üì¶ Produits populaires: {status['popular_products_count']}")
        
        # Afficher la configuration des magasins
        for store_id, store_info in status['stores'].items():
            print(f"      üè™ {store_info['name']}: {store_info['interval']}s ({store_info['interval']/3600:.1f}h)")
        
        # Test du scraping manuel
        print("\n   üéØ Test scraping manuel...")
        result = scraper.manual_scrape("smartphone")
        print(f"   üìù R√©sultat: {result}")
        
        print("\n AutoScraper fonctionne correctement !")
        return True
        
    except Exception as e:
        print(f"\n Erreur lors du test AutoScraper: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_scraping_save():
    """Teste la sauvegarde des donn√©es scrap√©es"""
    print("\nüíæ TEST DE SAUVEGARDE DES DONN√âES")
    print("=" * 50)
    
    try:
        from helpers.auto_scraper import AutoScraper
        from config.db import db
        from model.PriceScan_db import ps_products, ps_prices, ps_stores
        
        # Cr√©er une instance de test
        scraper = AutoScraper()
        
        # Donn√©es de test
        test_data = [
            {
                'name': 'Test Smartphone',
                'price': 150000,
                'store': 'Test Store'
            }
        ]
        
        print("   üß™ Test avec des donn√©es fictives...")
        
        # Cr√©er un produit de test
        test_product = ps_products()
        test_product.product_name = 'Test Smartphone'
        test_product.product_description = 'Produit de test pour v√©rification'
        test_product.is_active = True
        test_product.created_at = datetime.now()
        test_product.updated_on = datetime.now()
        
        db.session.add(test_product)
        db.session.flush()  # Pour obtenir l'ID
        
        print(f"    Produit de test cr√©√© avec ID: {test_product.id}")
        
        # Cr√©er un magasin de test
        test_store = ps_stores()
        test_store.store_name = 'Test Store'
        test_store.store_description = 'Magasin de test'
        test_store.is_active = True
        test_store.created_at = datetime.now()
        test_store.updated_on = datetime.now()
        
        db.session.add(test_store)
        db.session.flush()
        
        print(f"    Magasin de test cr√©√© avec ID: {test_store.id}")
        
        # Cr√©er un prix de test
        test_price = ps_prices()
        test_price.product_id = test_product.id
        test_price.store_name = 'Test Store'
        test_price.price_amount = 150000
        test_price.currency = 'XOF'
        test_price.is_active = True
        test_price.created_at = datetime.now()
        test_price.updated_on = datetime.now()
        
        db.session.add(test_price)
        
        # Sauvegarder en base
        db.session.commit()
        print("    Donn√©es de test sauvegard√©es en base")
        
        # V√©rifier la sauvegarde
        saved_price = ps_prices.query.filter_by(product_id=test_product.id).first()
        if saved_price:
            print(f"    Prix v√©rifi√© en base: {saved_price.price_amount} {saved_price.currency}")
        
        # Nettoyer les donn√©es de test
        db.session.delete(test_price)
        db.session.delete(test_product)
        db.session.delete(test_store)
        db.session.commit()
        print("   üßπ Donn√©es de test nettoy√©es")
        
        print("\n Test de sauvegarde r√©ussi !")
        return True
        
    except Exception as e:
        print(f"\n Erreur lors du test de sauvegarde: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_scraping_schedule():
    """Teste la planification du scraping"""
    print("\n‚è∞ TEST DE LA PLANIFICATION DU SCRAPING")
    print("=" * 50)
    
    try:
        from helpers.auto_scraper import AutoScraper
        
        # Cr√©er une instance de test
        scraper = AutoScraper()
        
        # V√©rifier la configuration des intervalles
        status = scraper.get_status()
        
        print("   üìÖ Configuration des intervalles:")
        for store_id, store_info in status['stores'].items():
            interval_hours = store_info['interval'] / 3600
            print(f"      üè™ {store_info['name']}: {interval_hours:.1f} heures")
        
        # V√©rifier si le scraping est configur√© pour s'ex√©cuter
        print(f"\n    Scraping automatique: {' Activ√©' if status['is_running'] else ' D√©sactiv√©'}")
        
        # Calculer la prochaine ex√©cution
        if status['stores']:
            min_interval = min(store['interval'] for store in status['stores'].values())
            next_run = datetime.now() + timedelta(seconds=min_interval)
            print(f"   ‚è±Ô∏è  Prochaine ex√©cution dans: {min_interval/3600:.1f} heures")
            print(f"   üìÖ Heure estim√©e: {next_run.strftime('%Y-%m-%d %H:%M:%S')}")
        
        print("\n Configuration de planification v√©rifi√©e !")
        return True
        
    except Exception as e:
        print(f"\n Erreur lors du test de planification: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    print(" TEST COMPLET DU SCRAPING AUTOMATIQUE")
    print("=" * 60)
    
    tests = [
        ("Connexion Base de Donn√©es", test_database_connection),
        ("Modules de Scraping", test_scraping_modules),
        ("AutoScraper", test_auto_scraper),
        ("Sauvegarde des Donn√©es", test_scraping_save),
        ("Planification du Scraping", test_scraping_schedule)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            print(f"\n{'='*20} {test_name} {'='*20}")
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"\n Erreur lors du test {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    print("\n" + "=" * 60)
    print(" R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = " PASS" if result else " FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("\nüéâ TOUS LES TESTS SONT PASS√âS !")
        print(" Le syst√®me de scraping automatique est pr√™t !")
        
        print("\nüí° INFORMATIONS IMPORTANTES:")
        print("   ‚Ä¢ Le scraping se lance automatiquement au d√©marrage de l'API")
        print("   ‚Ä¢ Intervalles actuels: 1-2 heures par magasin")
        print("   ‚Ä¢ Les donn√©es sont sauvegard√©es en base automatiquement")
        print("   ‚Ä¢ Pour modifier les intervalles, √©ditez config/scraping_config.py")
        
        print("\nüîß POUR MODIFIER L'INTERVALLE √Ä 5 JOURS:")
        print("   1. Modifiez config/scraping_config.py")
        print("   2. Changez SCRAPING_INTERVALS")
        print("   3. Red√©marrez l'API")
        
    else:
        print(f"\n  {total - passed} test(s) ont √©chou√©")
        print("üîß V√©rifiez les erreurs ci-dessus")

if __name__ == "__main__":
    main()
